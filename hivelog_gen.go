package regparser

// Autogenerated code from hivelog_vtypes.json. Do not edit.

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"sort"
	"strings"
	"unicode/utf16"
	"unicode/utf8"
)

var (
	// Depending on autogenerated code we may use this. Add a reference
	// to shut the compiler up.
	_ = bytes.MinRead
	_ = fmt.Sprintf
	_ = utf16.Decode
	_ = binary.LittleEndian
	_ = utf8.RuneError
	_ = sort.Strings
	_ = strings.Join
	_ = io.Copy
)

type HiveLogProfile struct {
	Off_HIVE_DIRTY_PAGE_REF_PageOffset  int64
	Off_HIVE_DIRTY_PAGE_REF_PageSize    int64
	Off_HIVE_LOG_ENTRY_Signature        int64
	Off_HIVE_LOG_ENTRY_LogEntrySize     int64
	Off_HIVE_LOG_ENTRY_Flags            int64
	Off_HIVE_LOG_ENTRY_SequenceNumber   int64
	Off_HIVE_LOG_ENTRY_HiveBinsDataSize int64
	Off_HIVE_LOG_ENTRY_DirtyPagesCount  int64
	Off_HIVE_LOG_ENTRY_Hash1            int64
	Off_HIVE_LOG_ENTRY_Hash2            int64
	Off_HIVE_LOG_ENTRY_DirtyPageRefs    int64
}

func NewHiveLogProfile() *HiveLogProfile {
	// Specific offsets can be tweaked to cater for slight version mismatches.
	self := &HiveLogProfile{0, 4, 0, 4, 8, 12, 16, 20, 24, 32, 40}
	return self
}

func (self *HiveLogProfile) HIVE_DIRTY_PAGE_REF(reader io.ReaderAt, offset int64) *HIVE_DIRTY_PAGE_REF {
	return &HIVE_DIRTY_PAGE_REF{Reader: reader, Offset: offset, Profile: self}
}

func (self *HiveLogProfile) HIVE_LOG_ENTRY(reader io.ReaderAt, offset int64) *HIVE_LOG_ENTRY {
	return &HIVE_LOG_ENTRY{Reader: reader, Offset: offset, Profile: self}
}

type HIVE_DIRTY_PAGE_REF struct {
	Reader  io.ReaderAt
	Offset  int64
	Profile *HiveLogProfile
}

func (self *HIVE_DIRTY_PAGE_REF) Size() int {
	return 8
}

func (self *HIVE_DIRTY_PAGE_REF) PageOffset() uint32 {
	return ParseUint32(self.Reader, self.Profile.Off_HIVE_DIRTY_PAGE_REF_PageOffset+self.Offset)
}

func (self *HIVE_DIRTY_PAGE_REF) PageSize() uint32 {
	return ParseUint32(self.Reader, self.Profile.Off_HIVE_DIRTY_PAGE_REF_PageSize+self.Offset)
}

type HIVE_LOG_ENTRY struct {
	Reader  io.ReaderAt
	Offset  int64
	Profile *HiveLogProfile
}

func (self *HIVE_LOG_ENTRY) Size() int {
	return 40
}

func (self *HIVE_LOG_ENTRY) Signature() uint32 {
	return ParseUint32(self.Reader, self.Profile.Off_HIVE_LOG_ENTRY_Signature+self.Offset)
}

func (self *HIVE_LOG_ENTRY) LogEntrySize() uint32 {
	return ParseUint32(self.Reader, self.Profile.Off_HIVE_LOG_ENTRY_LogEntrySize+self.Offset)
}

func (self *HIVE_LOG_ENTRY) Flags() uint32 {
	return ParseUint32(self.Reader, self.Profile.Off_HIVE_LOG_ENTRY_Flags+self.Offset)
}

func (self *HIVE_LOG_ENTRY) SequenceNumber() uint32 {
	return ParseUint32(self.Reader, self.Profile.Off_HIVE_LOG_ENTRY_SequenceNumber+self.Offset)
}

func (self *HIVE_LOG_ENTRY) HiveBinsDataSize() uint32 {
	return ParseUint32(self.Reader, self.Profile.Off_HIVE_LOG_ENTRY_HiveBinsDataSize+self.Offset)
}

func (self *HIVE_LOG_ENTRY) DirtyPagesCount() uint32 {
	return ParseUint32(self.Reader, self.Profile.Off_HIVE_LOG_ENTRY_DirtyPagesCount+self.Offset)
}

func (self *HIVE_LOG_ENTRY) Hash1() uint64 {
	return ParseUint64(self.Reader, self.Profile.Off_HIVE_LOG_ENTRY_Hash1+self.Offset)
}

func (self *HIVE_LOG_ENTRY) Hash2() uint64 {
	return ParseUint64(self.Reader, self.Profile.Off_HIVE_LOG_ENTRY_Hash2+self.Offset)
}

func (self *HIVE_LOG_ENTRY) DirtyPageRefs() []*HIVE_DIRTY_PAGE_REF {
	return ParseArray_HIVE_DIRTY_PAGE_REF(self.Profile, self.Reader, self.Profile.Off_HIVE_LOG_ENTRY_DirtyPageRefs+self.Offset, int(self.DirtyPagesCount()))
}

func ParseArray_HIVE_DIRTY_PAGE_REF(profile *HiveLogProfile, reader io.ReaderAt, offset int64, count int) []*HIVE_DIRTY_PAGE_REF {
	result := make([]*HIVE_DIRTY_PAGE_REF, 0, count)
	for i := 0; i < count; i++ {
		value := profile.HIVE_DIRTY_PAGE_REF(reader, offset)
		result = append(result, value)
		offset += int64(value.Size())
	}
	return result
}
